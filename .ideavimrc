" Leader Key
map <space> <nop>
let mapleader="\<space>"

" General Settings
set scrolloff=7
set history=100
set number
set showmode
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray

" Search
nmap <leader>nh :nohlsearch<CR>
nnoremap <silent> <Esc> :nohlsearch<CR><Esc>

" Tab Navigation
nnoremap <s-TAB> :action PreviousTab<CR>
nnoremap <TAB> :action NextTab<CR>
nmap <leader>1 <Action>(GoToTab1)
nmap <leader>2 <Action>(GoToTab2)
nmap <leader>3 <Action>(GoToTab3)
nmap <leader>4 <Action>(GoToTab4)
nmap <leader>5 <Action>(GoToTab5)
nmap <leader>6 <Action>(GoToTab6)
nmap <leader>7 <Action>(GoToTab7)
nmap <leader>8 <Action>(GoToTab8)
nmap <leader>9 <Action>(GoToTab9)

" Tab Movement Shortcuts
nnoremap gh <C-w>h
nnoremap gl <C-w>l
nnoremap gj <C-w>j
nnoremap gk <C-w>k

" WhichKey Descriptions for Tab Movement
let g:WhichKeyDesc_tab_move_left = 'gh move current tab left'
let g:WhichKeyDesc_tab_move_right = 'gl move current tab right'
let g:WhichKeyDesc_tab_move_down = 'gj move current tab down'
let g:WhichKeyDesc_tab_move_up = 'gk move current tab up'

" Navigation Between Files and Editors
nmap <leader>xa <Action>(CloseAllEditors)
nmap <leader>xo <Action>(CloseAllEditorsButActive)
nmap <leader>xp <Action>(CloseAllUnpinnedEditors)
nmap <leader>xl <Action>(CloseAllToTheRight)
nmap <leader>xh <Action>(CloseAllToTheLeft)

" WhichKey Descriptions for Navigation
let g:WhichKeyDesc_close_all_editors = '<leader>xa close all editors'
let g:WhichKeyDesc_close_all_editors_but_active = '<leader>xo close all editors but active'
let g:WhichKeyDesc_close_all_unpinned_editors = '<leader>xp close all unpinned editors'
let g:WhichKeyDesc_close_all_to_the_right = '<leader>xl close all to the right'
let g:WhichKeyDesc_close_all_to_the_left = '<leader>xh close all to the left'

" Window Splitting/Navigation
nnoremap <leader>i :action SplitVertically<Cr>
nnoremap <leader>I :action SplitVertically<Cr> :action MoveEditorToOppositeTabGroup<CR>
nnoremap <leader>- :action SplitHorizontally<CR>
nnoremap <leader>_ :action SplitHorizontally<CR> :action MoveEditorToOppositeTabGroup<Cr>
nnoremap <leader>me :action MoveEditorToOppositeTabGroup<CR>

" WhichKey Descriptions for Splitting
let g:WhichKeyDesc_split_vertically = '<leader>i split vertically'
let g:WhichKeyDesc_split_vertically_move_editor_to_opposite_tab_group = '<leader>I split vertically and move editor to opposite tab group'
let g:WhichKeyDesc_split_horizontally = '<leader>- split horizontally'
let g:WhichKeyDesc_split_horizontally_move_editor_to_opposite_tab_group = '<leader>_ split horizontally and move editor to opposite tab group'
let g:WhichKeyDesc_move_editor_to_opposite_tab_group = '<leader>me move editor to opposite tab group'

" Navigation Commands
nmap gb <action>(Back)
nmap gf <action>(Forward)
nmap gd <action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gI <Action>(QuickImplementations)
nmap g; <Action>(VcsShowNextChangeMarker)
nmap g, <Action>(VcsShowPrevChangeMarker)
nmap gu <Action>(FindUsages)
nnoremap ge :action GotoNextError<CR>
nnoremap gE :action GotoPreviousError<CR>
nnoremap gt :action GotoTest<CR>
nmap gs <Action>(MoveEditorToOppositeTabGroup)

" WhichKey Descriptions for Navigation Commands
let g:WhichKeyDesc_goto_back = 'gb go back'
let g:WhichKeyDesc_goto_forward = 'gf go forward'
let g:WhichKeyDesc_goto_declaration = 'gd go to declaration'
let g:WhichKeyDesc_goto_type_declaration = 'gD go to type declaration'
let g:WhichKeyDesc_goto_implementation = 'gi go to implementation'
let g:WhichKeyDesc_goto_quick_implementations = 'gI go to quick implementations'
let g:WhichKeyDesc_goto_next_change_marker = 'gc go to next change marker'
let g:WhichKeyDesc_goto_prev_change_marker = 'gC go to prev change marker'
let g:WhichKeyDesc_goto_next_error = 'ge go to next error'
let g:WhichKeyDesc_goto_prev_error = 'gE go to prev error'
let g:WhichKeyDesc_goto_test = 'gt go to test'
let g:WhichKeyDesc_move_editor_to_opposite_tab_group = 'gs move editor to opposite tab group'
let g:WhichKeyDesc_find_usages = 'gu find usages'

" Bookmarks
nmap mm <Action>(ToggleBookmark)
nmap ms <Action>(ShowBookmarks)
nmap m; <Action>(GotoNextBookmarkInEditor)

" VCS
nmap <leader>gg :action Vcs.QuickListPopupAction<CR>
nmap <leader>gu :action Vcs.RollbackChangedLines<CR>
nmap <leader>gb :action Git.Branches<CR>

" Undo and Redo
nmap U <action>($Redo)

" Rename Actions
nmap <leader>rf <action>(RenameFile)
nmap <leader>re <action>(RenameElement)

" Copilot
nmap <leader>cc <action>(copilot.chat.show)

" File Management
nmap <leader>ne <action>(NewElement)
nmap <leader>nf <action>(NewFile)
nmap <leader>rf <action>(RenameFile)

" Plugin Configurations
set vim-paragraph-motion
set textobj-indent
set argtextobj
set easymotion
set highlightedyank
set surround
set exchange
set multiple-cursors

" Plugin Key Mappings and Descriptions
nmap <M-j> <Plug>NextWholeOccurrence
xmap <M-j> <Plug>NextWholeOccurrence
nmap <D-j> <Plug>NextOccurrence
xmap <D-j> <Plug>NextOccurrence
xmap <M-s> <Plug>SkipOccurrence
xmap <M-k> <Plug>RemoveOccurrence
nmap <leader><D-j> <Plug>AllWholeOccurrences
xmap <leader><D-j> <Plug>AllWholeOccurrences
nmap <leader><M-j> <Plug>AllOccurrences
xmap <leader><M-j> <Plug>AllOccurrences
map <D-j> <Action>(SelectNextOccurrence)
xmap <D-j> <Action>(SelectNextOccurrence)

let g:WhichKeyDesc_next_whole_occurrence = '<M-j> select next whole occurrence'
let g:WhichKeyDesc_next_occurrence = '<D-j> select next occurrence'
let g:WhichKeyDesc_skip_occurrence = '<M-s> skip occurrence'
let g:WhichKeyDesc_remove_occurrence = '<M-k> remove occurrence'
let g:WhichKeyDesc_all_whole_occurrences = '<leader><D-j> select all whole occurrences'
let g:WhichKeyDesc_all_occurrences = '<leader><M-j> select all occurrences'

" NERDTree Plugin
set NERDTree
nnoremap <leader>et :NERDTreeToggle<CR>
nnoremap <leader>eo :NERDTreeFocus<CR>
nnoremap <leader>ec :NERDTreeClose<CR>
nnoremap <leader>ef :NERDTreeFind<CR>
nnoremap <leader>er :NERDTreeRefreshRoot<CR>

let g:WhichKeyDesc_nerdtree_toggle = '<leader>et toggle explorer panel'
let g:WhichKeyDesc_nerdtree_focus = '<leader>eo focus explorer panel'
let g:WhichKeyDesc_nerdtree_close = '<leader>ec close explorer panel'
let g:WhichKeyDesc_nerdtree_find = '<leader>ef find and focus current file in explorer panel'
let g:WhichKeyDesc_nerdtree_refresh = '<leader>er refresh explorer panel'

" Sneak Plugin
set sneak

" Which-Key Plugin Settings
set which-key
set timeoutlen=3000
let g:WhichKey_ProcessUnknownMappings = "false"

" Git Integration
nmap <leader>gs <Action>(GitToolBox.SwitchRecentBranches)

" Scratch File
map <leader>ns <Action>(NewScratchFile)

" Refactorings
map <leader>RR <Action>(Refactorings.QuickListPopupAction)
map <leader>sw <Action>(SurroundWith)
